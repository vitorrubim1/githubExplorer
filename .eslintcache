[{"/home/carlos/Documentos/githubreq/src/App.tsx":"1","/home/carlos/Documentos/githubreq/src/routes/index.tsx":"2","/home/carlos/Documentos/githubreq/src/pages/Dashboard/index.tsx":"3","/home/carlos/Documentos/githubreq/src/index.tsx":"4","/home/carlos/Documentos/githubreq/src/pages/Repository/index.tsx":"5","/home/carlos/Documentos/githubreq/src/pages/Dashboard/styles.ts":"6","/home/carlos/Documentos/githubreq/src/styles/Global.ts":"7","/home/carlos/Documentos/githubreq/src/services/api.ts":"8"},{"size":299,"mtime":1611078528270,"results":"9","hashOfConfig":"10"},{"size":378,"mtime":1611076702889,"results":"11","hashOfConfig":"10"},{"size":2795,"mtime":1611168038002,"results":"12","hashOfConfig":"10"},{"size":197,"mtime":1611002863697,"results":"13","hashOfConfig":"10"},{"size":166,"mtime":1611076311006,"results":"14","hashOfConfig":"10"},{"size":1813,"mtime":1611167381646,"results":"15","hashOfConfig":"10"},{"size":693,"mtime":1611081589946,"results":"16","hashOfConfig":"10"},{"size":115,"mtime":1611082882265,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vihvin",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/carlos/Documentos/githubreq/src/App.tsx",[],"/home/carlos/Documentos/githubreq/src/routes/index.tsx",[],"/home/carlos/Documentos/githubreq/src/pages/Dashboard/index.tsx",["35"],"import React, { useState, useEffect, FormEvent } from \"react\";\nimport { FiChevronRight } from \"react-icons/fi\";\n\nimport logoImg from \"../../assets/logo.svg\";\nimport api from \"../../services/api\";\n\nimport { Title, Form, Repositories, Error } from \"./styles\";\n\ninterface Repository {\n  //formato dos dados da api\n  full_name: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n  description: string;\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepository, setNewRepository] = useState(\"\");\n  const [inputError, setInputError] = useState(\"\");\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storageRepositories = localStorage.getItem(\n      \"@GithubExplorer:repositories\"\n    );\n\n    if (storageRepositories) {\n      return JSON.parse(storageRepositories);\n    } else {\n      return []; //que seria o valor inicial do estado\n    }\n  });\n\n  async function handleAddRepository(\n    event: FormEvent<HTMLFormElement>\n  ): Promise<void> {\n    event.preventDefault();\n\n    if (!newRepository) {\n      setInputError(\"Digite o autor/nome do repositório\");\n      return; //pra evitar que o código continue executando\n    }\n\n    try {\n      const response = await api.get<Repository>(`repos/${newRepository}`);\n\n      const repository = response.data;\n\n      setRepositories([...repositories, repository]);\n      setNewRepository(\"\");\n      setInputError(\"\");\n    } catch (error) {\n      setInputError(\"Erro na busca por esse repositório\");\n    }\n  }\n\n  useEffect(() => {\n    localStorage.setItem(\n      \"@GithubExplorer:repositories\",\n      JSON.stringify(repositories)\n    );\n  }, [repositories]);\n\n  return (\n    <>\n      <img src={logoImg} alt=\"Github explorer\" />\n      <Title>Explore repositórios no Github</Title>\n\n      <Form hasError={Boolean(inputError)} onSubmit={handleAddRepository}>\n        <input\n          placeholder=\"Digite o nome do repositório\"\n          value={newRepository}\n          onChange={(event) => setNewRepository(event.target.value)}\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n\n      {inputError && <Error> {inputError} </Error>}\n\n      <Repositories>\n        {repositories.map((repositories, index) => (\n          <a href=\"#\">\n            <img\n              key={index}\n              src={repositories.owner.avatar_url}\n              alt=\"Avatar of owner repository\"\n            />\n            <div>\n              <strong>{repositories.owner.login}</strong>\n              <p>\n                {repositories.description\n                  ? repositories.description\n                  : \"Não há descrição.\"}\n              </p>\n            </div>\n\n            <FiChevronRight size={20} />\n          </a>\n        ))}\n      </Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n","/home/carlos/Documentos/githubreq/src/index.tsx",[],"/home/carlos/Documentos/githubreq/src/pages/Repository/index.tsx",[],"/home/carlos/Documentos/githubreq/src/pages/Dashboard/styles.ts",[],"/home/carlos/Documentos/githubreq/src/styles/Global.ts",[],"/home/carlos/Documentos/githubreq/src/services/api.ts",[],{"ruleId":"36","severity":1,"message":"37","line":82,"column":11,"nodeType":"38","endLine":82,"endColumn":23},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]